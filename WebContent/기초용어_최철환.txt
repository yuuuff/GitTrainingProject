[컴퓨터 기초]

소프트웨어(Software):  저장장치에 저장된 특정한 목적의 하나 또는 다수의 컴퓨터 프로그램
             예:엑셀,파워포인트등

하드웨어(Hardware):중앙 처리 장치(CPU), 모니터, 키보드, 컴퓨터 기억 장치(HDD), 그래픽 카드, 사운드 카드, 메인보드와 같은 
          컴퓨터의 물리적 부품을 의미


운영체제(Operating System):컴퓨터 시스템의 각종 하드웨어적인 자원과 소프트웨어적인 자원을 효율적으로 운영 관리함으로써 
            사용자가 컴퓨터 시스템을 이용하는데 편리함을 제공하는 시스템 소프트웨어이다.
            운영체제는 사용자가 응용 프로그램을 편리하게 사용하고 하드웨어의 성능을 최적화 할 수 있도록 한다
            예를들면 윈도우 10,리눅스,유닉스,맥등이 대표적은 운영체제이다

부팅(Booting):부트스트랩의 줄임말로, 구형 자동차에서 시동을 걸때 사용하던 가죽끈에서 유래. 
         컴퓨터가 각종 응용소프트웨어(프로그램)를 사용할 수 있도록 준비를 하는 과정 

백업(BackUp):하드디스크와 같은 다른 저장장치에 기존 자료를 하나 더 만들어 놓는 작업. 

상용 소프트웨어: 무료 프로그램이 아닌 유료 즉 돈을 주고 구입하는 모든 프로그램이나 소프트웨어를 일컫는 말
                 예: 윈도우 OS나 엑셀등

패치 프로그램(Patch Program): 프로그램의 버그나 잘못된 것을 수정하거나 조정해주는 수정파일(프로그램)을 말한다.

번들 프로그램(Bundle Program):컴퓨터(하드웨어)나 그외 소프트웨어를 구입하면 함께 끼워주는 프로그램을 지칭한다 

프리웨어(Freeware) : 아무조건 이나 기간, 기능 제한없는 무료로 배포되는 프로그램.
 
쉐어웨어(Shareware):약간의 금액을 지불하면 정품처럼 사용할수 있는 프로그램으로 지불을 거절하면 사용제한이 있다. 
         요즘 대부분의 유틸리티가 셰어웨어에 속하며 대표적인것이 알집등이 있다. 

유틸리티(Utility):유용하다는 뜻으로 컴퓨터의 기능을 좀더 편하게 도와주거나 다른 프로그램을 보조해주는 프로그램으로
         용량은 별로 크지 않고 대부분 쉐어웨어가 많다. 
         예:백신, 알집등

드라이버(Driver):컴퓨터의 주변 장치(사운드카드,그래픽커드등)를 쓸 수 있는 제어기능을 가진 기본소프트웨어를 말한다.

메모리(Memory):CPU가 처리할 데이터를 미리 준비해주는 기억장치. 물론 용량이 크면 속도도 빨라진다. 
      램(RAM)과 롬(ROM)으로 구분되는데 램은 읽고 쓸수있지만 전원을 끄면 담았던 내용이 없어진다. 
      롬은 읽기전용 메모리로 전원을 꺼도 담았던 내용이 그대로 있다. 대표적인것으론 CMOS 바이오스가 있다.  

      
[프로그래밍 기초]


바이너리(Binary): 바이너리는 0과 1, 두 숫자로만 이루어진 이진법(二進法)을 의미한다.
          컴퓨터에서 정보는 이진 형태로 저장(0또는 1)되며, 바이너리는 이진 파일을 의미한다.          
          이진 파일은 텍스트 형태가 아닌 이진 형태로 인코딩 된 파일이다
          즉 메모장과 같은 텍스트 편집기로 열었을때 사람이 알알 볼 수 없는 코드 조각으로 되어있는 파일이다
          예를 들면 확장자가 .exe나 .dll파일 등이다

프로그램(Program): 컴퓨터 프로그램은 컴퓨터에서 실행될 때 특정 작업을 수행하는 일련의 명령어들의 모음이다.
           특정 문제를 해결하기 위해 고안된 특정 작업을 수행하기 위한 일련의 명령문의 집합체이며 대부분의 프로그램은 실행 중
           (즉, 명령어를 '불러들일' 때)에 사용자의 입력에 반응하도록 구현된 일련의 명령어들로 구성되어 있다. 
           대부분의 프로그램들은 하드디스크 등의 매체에 바이너리 형식의 파일로 저장되어 있다가 사용자가 실행시키면 
           메모리로 적재되어 실행된다. 컴퓨터 소프트웨어와 비슷한 뜻을 가지고 있다

프로그래밍 언어(Programming Language): 컴퓨터 시스템을 구동시키는 프로그램을 작성하기 위한 형식언어이다. 
                 고급 언어일수록 사람이 사용하는 언어에 가깝다.
                 예를들면 C,C++,C#,JAVA등을 말한다

컴파일러(Compiler) : 프로그래밍 언어로 작성한 코드들을 컴퓨터가 이해하는 기계어로 변환해주는 컴퓨터 프로그램 또는 환경을 말한다

인터프리터(Interpreter):프로그래밍 언어의 코드를 바로 해석(Interpret)해 실행하는 프로그램이나 환경을 의미한다
           원시 코드를 기계어로 번역하는 컴파일러와 대비된다
           
스크립트 언어(Script Language):별도의 컴파일러 작업이 필요없는 언어. 이에 따라 변수마다 자료형을 지정할 필요가 없는 언어. 
              HTML5, CSS3, JavaScript등이 대표적인 스크립트 언어이다

라이브러리(Library) : 프로그램에서 자주 사용하고 공통되게 사용할 수 있는 기능들을 묶은 것

API :Application Programming Interface의 약자로 프로그램끼리 서로 소통하는 인터페이스를 말함. 
     라이브러리도 일종의 API라고 볼 수 있다.

컴포넌트(Component) : 다시 사용할 수 있는 범용성을 위해 개발된 소프트웨어 구성 요소 부품을 일컫는다

프레임워크(Framework):프로그래밍에 집중하도록 기본적인 기능을 제공하는 환경으로 라이브러리들의 묶음으로 생각하면 된다.

플랫폼(Platform):  프로그램이 실행되는 운영체제 환경들을 말한다

IDE(Integrated Development Environment) :하나의 프로그램으로 컴파일 부터 실행 그리고
                                         패키징등 개발 통합 환경을 제공하는 소프트웨어이다

SDK(Software Development Kit) : 응용 프로그램 등을 만들 수 있게 해주는 개발 도구의 집합.
                                                                개발자가 만든 프로그램을 실행 할 수 있는 컴퍼일러,실행파일 및
                                                                라이브러리등의 집합이다

객체 지향 프로그래밍(Object-Oriented Programming):
프로그래밍 방식 중에 하나로, 프로그램을 하나의 명령어 묶음으로 보기 보다 여러 개의 독립된 객체로 보는 데서 시작한다. 
비슷한 말로 모듈화 프로그래밍, 구조적 프로그래밍 등이 있으며, 주로 절차 지향 프로그래밍과 비교하여 설명한다. 
개발에 복잡해지나 유지 보수와 확장이 쉽다는 장점이 있다.

절차 지향 프로그래밍(Procedural Programming):
프로그래밍 방식 중에 하나로, 순차적인 명령어의 처리에 집중한다. 때문에 명령어 프로그래밍으로 불리기도 하며, 
개발이 단순하고 코드가 단순할 때는 오히려 유지보수에 장점이 있다. 
주로 객체 지향 프로그래밍과 비교하여 설명한다        





[웹 및 모바일 기초]



프로토콜(Protocol): 인터넷(네트워크)상의 연결된 서로 다른 컴퓨터간끼리  자료를 주고받기 위해 정한 약속 내지 규칙
          예: HTTP/HTTPS/FTP등

방화벽(Firewall): 컴퓨터 네트워크에서 바라지 않거나 인증되지 않은 통신을 막도록 설계된 프로그램이나 하드웨어를 말한다

서버(Server): 외부에서 인터넷 등을 이용해 원격으로 접속할 수 있도록 구성된 컴퓨터 또는 프로그램으로
      클라이언트에 서비스를 제공한다
      예를 들면 웹 서버(IIS,톰캣,웹로직등)는 .HTML를 브라우저로 제공해주는 서버 프로그램이다 

클라이언트(Client): 서버에 접속하는 주체, "사용자"의 의미로 쓰인다.즉 서버가 제공하는 서비스를 받는 프로그램 또는 컴퓨터
            예를들면 웹브라우저는 .HTML문서를  서비스 받는 클라이언트 프로그램이다 

렌더링(Rendering):웹에서는 브라우저가 코드를 바탕으로 클라이언트에게 시각적으로 볼 수 있는 페이지를 구성하는 작업, 
       또는 동적으로 데이터를 구성하는 작업을 말한다

서버사이드 렌더링(Server-Side Rendering):
동적인 데이터를 서버의 자원을 이용해 미리 HTML 포멧으로 바꾸어 렌더링한 후 클라이언트에게 보내주는 방식을 말한다.

클라이언트사이드 렌더링(CSR, Client-Side Rendering):
서버로부터 페이지를 내려받은 후, 클라이언트의 자원(CPU, 메모리 등)을 이용해 동적인 데이터를 렌더링 하는 방식을 의미한다.

URL(Uniform Resource Locator): 네트워크 상에서 자원이 어디 있는지를 알려주기 위한 규약. 
                               즉, 컴퓨터 네트워크와 검색 메커니즘에서의 위치를 지정하는, 웹 리소스에 대한 참조이다. 
                               쉽게 말해서, 웹 페이지를 찾기위한 주소를 말한다. 

URI(Uniform Resource Identifier, URI): 인터넷에 있는 자원을 나타내는 유일한 주소. URL보다 광의의 개념이다

HTTP(HyperText Transfer Protocol):인터넷에서 웹문서(HTML)를 주고 받을 수 있는 프로토콜. 주로 80번 포트를 사용.

HTTPS(HTTP over Secure Socket Layer, HTTP over TLS, HTTP over SSL, HTTP Secure):
HTTP 프로토콜의 보안 강화 버전으로 TLS 암호화 기술을 이용해 통신한다. HTTP 프로토콜은 해커가 요청을 가로챌 경우 비밀번호 등 민감한 정보가 평문 그대로 노출되기 때문에 위험한데, HTTPS는 해커가 요청을 가로채더라도 암호화되어 있기 때문에 해킹의 위험이 굉장히 줄어든다. 주로 443번 포트를 사용한다.

SSL(Secure Socket Layer):
인터넷에서 정보를 암호화해서 송수신하는 프로토콜. 현재는 TLS로 개명되었다. 암호화는 웹 뿐만 아니라 FTP 송수신 등에도 적용할 수 있다.

TLS(Transport Layer Security):
인터넷에서 정보를 암호화해서 송수신하는 프로토콜. SSL을 기반으로 개발한 기술로, 국제 표준으로 인정 받은 프로토콜이다.

TELNET:
서버에 직접 연결해 작업을 수행하기 위한 용도(명령어 실행 등)으로 이용하는 프로토콜. 주로 22번 포트를 이용. 암호화가 적용되지 않았기 때문에 대부분 SSH로 대체되었다.

SSH(Secure SHell):
기존의 TELNET에 암호화 기술을 추가한 프로토콜. 주로 22번 포트를 이용한다.

포트(Port):
사전적 의미로는 항구를 뜻하나, 서버에 존재하는 서버 프로그램을 구분하기위한 숫자이다
         
프론트엔드(Front-end):
클라이언트에 제공되는 프로그램의 시각적으로 보이는 부분을 말한다. 
웹에서는 프론트엔드에서 데이터를 처리하는 등 백엔드의 역할을 프론트엔드가 담당하는 경우가 많아지면서 퍼블리셔와 프론트엔드로 세분화됐다.

백엔드(Back-end):
프로그램의 서버쪽으로 데이터 처리, 보안 등을 담당하는 분야를 말한다. 
최근 클라이언트 쪽 컴퓨터 사양이 좋아지면서, 웹에서는 데이터 처리를 백엔드에서 하기보다는 프론트엔드에서 하는 쪽으로 옮겨가는 추세이다.

WAS(Web Application Server):
HTTP 통신을 이용해 어플리케이션을 수행하는 서버로, 웹에서는 주로 DB와 연동해 동적인 데이터 처리에 이용한다. 동적 컨텐츠 수행이라는 점에서 웹 서버와는 구분된다.


네이티브 앱(Native App):모바일 환경에서만 동작하는 어플리케이션

모바일웹:모바일 해상도의 웹브라우저에 최적화되어 보일 수 있도록 만든 웹

하이브리드 앱(Hybrid App, Hybrid Application): 모바일웹과 네이티브 앱의 장점을 가져와서 혼합한 형태의 앱이다. 
                                               쉽게 말해서 껍데기는 앱으로 만들고 내용은 웹으로 만든 형태라고 할 수 있다.